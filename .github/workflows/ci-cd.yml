name: CI/CD Pipeline

permissions:
  contents: write  # T1

on:
  push:
    branches: [master, develop, develop-backend]
  pull_request:
    branches: [master, develop, develop-backend]

jobs:
  backend-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx eslint . --config eslint.config.js

      - name: Run tests
        run: node --experimental-vm-modules ./node_modules/jest/bin/jest.js

  build:
    needs: backend-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  release:
    needs: [backend-test, build]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/master' &&
      !contains(github.event.head_commit.message, 'chore(release)') &&
      (startsWith(github.event.head_commit.message, 'feat') || startsWith(github.event.head_commit.message, 'fix'))
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create Release with standard-version
        run: |
          npm run release

      - name: Extract version from package.json
        id: extract_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Push version commit & tag
        run: |
          git push --follow-tags origin master

      - name: Create zip archive
        run: cd dist && zip -r ../cicdpipeline-${{ steps.extract_version.outputs.version }}.zip .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          bodyFile: CHANGELOG.md
          artifacts: ./cicdpipeline-${{ steps.extract_version.outputs.version }}.zip
          generateReleaseNotes: false
